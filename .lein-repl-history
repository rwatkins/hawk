(System/getProperty "user.dir")
(def t (ref {}))
(@t)
@t
(ref-set t (assoc @t :name "test"))
(dosync (ref-set t (assoc @t :name "test")))
t
@t
(when (boolean nil) "asdf")
(when (not (boolean nil)) "asdf")
(when (not (boolean 1)) "asdf")
(into [1] [1 2 3])
(use 'hawk.handler)
(def account {:id 1 :name "SF Fire Checking"})
(account-li account)
(use 'hawk.handler)
(account-li account)
(use 'hawk.handler :reload)
(account-li account)
(use 'clojure.java.jdbc)
(def db-spec "postgresql://localhost:5432/clj_hawk")
(sql/with-connection db-spec
    (sql/drop-table :testing))
(with-connection db-spec
    (drop-table :testing))
(with-connection db-spec
    (drop-table :testing))
(def db-spec "postgresql://localhost:5432/clj_hawk")
(use 'clojure.java.jdbc)
(with-connection db-spec (drop-table :account))
(use 'hawk.models.account)
account
(reset-table)
(use 'hawk.models.account)
(reset-table)
(use 'hawk.models.account)
(reset-table)
(require '[clojure.java.jdbc :as sql])
(sql/with-connection "postgresql://localhost:5432/clj_hawk"
  (sql/drop-table :account))
(reset-table)
(all-accounts)
(use 'hawk.models.account)
(reset-table)
(use 'hawk.models.account)
(-drop-table)
(require ['clojure.java.jdbc :as 'sql])
sql
(sql/with-connection "postgresql://localhost:5432/clj_hawk" (-drop-table))
(reset-table)
(all-accounts)
(init-data)
(all-accounts)
(reset-table)
(init-data)
(all-accounts)
(account)
account
(use 'hawk.models.account)
(bootstrap)
(def db "postgresql://localhost:5432/clj_hawk")
(use 'korma.core)
(require '[hawk.models.account :as models.account])
(def account models.account/account)
account
(insert account (values {:name "Capital One"}))
(models.account/all)
(count "")
(count " ")
(when "" true)
(when (not= (count "") 0) true)
(when (not= (count "i") 0) true)
